#!/usr/bin/env python3
import os
import sys
import re
import argparse
from statistics import mean

LOG_DIR = "./logs"


def parse_log_file(file_path):
	"""
	Parse a log file to extract FPS, Draw time, and Update time values.
	"""
	fps_values, draw_times, update_times = [], [], []
	with open(file_path, "r") as file:
		for line in file:
			fps_match = re.search(r"(\d+\.\d+) FPS", line)
			draw_match = re.search(r"(\d+\.\d+) ns \(average Draw time\)", line)
			update_match = re.search(r"(\d+\.\d+) ns \(average Update time\)", line)
			if fps_match:
				fps_values.append(float(fps_match.group(1)))
			if draw_match:
				draw_times.append(float(draw_match.group(1)))
			if update_match:
				update_times.append(float(update_match.group(1)))
	return fps_values, draw_times, update_times


def calculate_averages(file_paths):
	"""
	Calculate average FPS, Draw time, and Update time from multiple log files.
	"""
	fps_values, draw_times, update_times = [], [], []
	for file_path in file_paths:
		fps, draw, update = parse_log_file(file_path)
		fps_values.extend(fps)
		draw_times.extend(draw)
		update_times.extend(update)
	return mean(fps_values), mean(draw_times), mean(update_times)


# Parse arguments
parser = argparse.ArgumentParser(description="Process log files to calculate averages.")
parser.add_argument("-c", "--compare", action="store_true", help="Compare two versions of logs.")
parser.add_argument("-m", "--max-logs", type=int, default=10, help="Maximum number of log files to process.")
args = parser.parse_args()

# Prepare log files
if args.compare:
	version1_files = [os.path.join(LOG_DIR, f"results.log.{i}") for i in range(args.max_logs // 2)]
	version2_files = [os.path.join(LOG_DIR, f"results.log.{i}") for i in range(args.max_logs // 2, args.max_logs - 1)]
	version1_files[0] = os.path.join(LOG_DIR, "results.log")
	version1_avg = calculate_averages(version1_files)
	version2_avg = calculate_averages(version2_files)
	print("Comparison of Averages:", file=sys.stdout)
	print(f"Metric                  | Version 1 (logs 0-{args.max_logs // 2 - 1}) | Version 2 (logs {args.max_logs // 2}-{args.max_logs - 1})", file=sys.stdout)
	print("------------------------|------------------------|----------------------", file=sys.stdout)
	print(f"FPS (average)           | {version1_avg[0]:.2f}                  | {version2_avg[0]:.2f}", file=sys.stdout)
	print(f"Draw time (average ns)  | {version1_avg[1]:.2f}                | {version2_avg[1]:.2f}", file=sys.stdout)
	print(f"Update time (average ns)| {version1_avg[2]:.2f}                | {version2_avg[2]:.2f}", file=sys.stdout)
	sys.exit(0)

if args.max_logs < 1:
	print("Error: Maximum number of logs must be at least 1.", file=sys.stderr)
	sys.exit(1)
if not os.path.exists(os.path.join(LOG_DIR, f"results.log.{args.max_logs - 1}")):
	print(f"Error: Not enough logs found in {LOG_DIR}.", file=sys.stderr)
	sys.exit(1)

all_files = [os.path.join(LOG_DIR, f"results.log.{i}") for i in range(args.max_logs)]
all_files[0] = os.path.join(LOG_DIR, "results.log")
all_avg = calculate_averages(all_files)
print("Averages for All Logs:", file=sys.stdout)
print(f"Metric                  | All Logs (0-{args.max_logs - 1})", file=sys.stdout)
print("------------------------|----------------------", file=sys.stdout)
print(f"FPS (average)           | {all_avg[0]:.2f}", file=sys.stdout)
print(f"Draw time (average ns)  | {all_avg[1]:.2f}", file=sys.stdout)
print(f"Update time (average ns)| {all_avg[2]:.2f}", file=sys.stdout)
